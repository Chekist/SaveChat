<?php
declare(strict_types=1);

require_once __DIR__ . '/SessionManager.php';
require_once __DIR__ . '/RateLimiter.php';
require_once __DIR__ . '/SecurityHelper.php';

$session = SessionManager::getInstance();
SecurityHelper::ensureXsrfCookie(); // —É—Å—Ç–∞–Ω–æ–≤–∏–º XSRF cookie –¥–ª—è double-submit
// –õ–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫: 5 –∑–∞ 5 –º–∏–Ω—É—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥)

// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
if ($session->isLoggedIn()) {
    header('Location: /?page=cabinet');
    exit;
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞
try {
    RateLimiter::requireLimit('login_attempts');
} catch (RateLimitExceededException $e) {
    $remainingTime = $e->getRetryAfter();
    $errorMessage = "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {$remainingTime} —Å–µ–∫—É–Ω–¥.";
}
?>

<div class="container">
  <div style="max-width: 400px; margin: 2rem auto;">
    <div class="card">
      <div class="card-body">
        <h2 class="card-title text-center mb-3">–í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç</h2>
        
        <?php if (isset($errorMessage)): ?>
        <div class="alert alert-danger" role="alert">
            <?= htmlspecialchars($errorMessage, ENT_QUOTES, 'UTF-8') ?>
        </div>
        <?php endif; ?>
        
        <form class="login-form" method="post" action="login_handler.php" id="loginForm" autocomplete="on">
          <input type="hidden" name="login_attempt" value="1">
          <input type="hidden" name="action" value="login">
          
          <div class="form-group">
            <label for="login" class="form-label">–õ–æ–≥–∏–Ω</label>
            <input 
                class="form-input" 
                type="text" 
                id="login" 
                name="login" 
                required 
                minlength="3" 
                maxlength="50"
                pattern="[a-zA-Z0-9_\-\.@]+"
                title="–î–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, —Å–∏–º–≤–æ–ª—ã _ - . @"
                autocomplete="username"
                <?= isset($login) ? 'value="' . htmlspecialchars($login, ENT_QUOTES, 'UTF-8') . '"' : '' ?>
            >
          </div>
          
          <div class="form-group">
            <label for="password" class="form-label">–ü–∞—Ä–æ–ª—å</label>
            <div class="password-input-container">
                <input 
                    class="form-input" 
                    type="password" 
                    id="password" 
                    name="password" 
                    required 
                    minlength="8"
                    maxlength="100"
                    autocomplete="current-password"
                    pattern="(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,}"
                    title="–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è –∑–∞–≥–ª–∞–≤–Ω—ã–µ –∏ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã"
                >
                <button type="button" class="toggle-password" aria-label="–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –ø–∞—Ä–æ–ª—å">
                    <i class="eye-icon">üëÅÔ∏è</i>
                </button>
            </div>
            <div class="password-strength" id="password-strength"></div>
          </div>
          
          <div class="form-group">
            <div class="d-flex justify-content-between align-items-center">
                <div class="form-check">
                    <input type="checkbox" class="form-check-input" id="remember" name="remember" value="1">
                    <label class="form-check-label" for="remember">–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è</label>
                </div>
                <a href="/?page=forgot-password" class="text-primary">–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?</a>
            </div>
          </div>
          
          <button 
              class="btn btn-primary" 
              type="submit" 
              id="login-button"
              style="width: 100%;"
              <?= isset($errorMessage) ? 'disabled' : '' ?>>
              <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
              <span class="button-text">–í–æ–π—Ç–∏</span>
          </button>
          
          <div id="error-message" class="alert alert-danger mt-3 d-none"></div>
          
          <?php if (isset($_GET['redirect'])): ?>
          <input type="hidden" name="redirect" value="<?= htmlspecialchars($_GET['redirect'], ENT_QUOTES, 'UTF-8') ?>">
          <?php endif; ?>
        </form>
        
        <div class="text-center mt-3">
          <p class="text-gray">–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? <a href="/?page=register" class="text-primary">–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</a></p>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
.password-input-container {
    position: relative;
    display: flex;
    align-items: center;
}

.toggle-password {
    position: absolute;
    right: 10px;
    background: none;
    border: none;
    cursor: pointer;
    padding: 0;
    font-size: 1.2em;
    color: #666;
}

.password-strength {
    height: 4px;
    margin-top: 5px;
    border-radius: 2px;
    transition: all 0.3s ease;
}

.strength-0 { width: 20%; background-color: #ff4444; }
.strength-1 { width: 40%; background-color: #ffbb33; }
.strength-2 { width: 60%; background-color: #ffbb33; }
.strength-3 { width: 80%; background-color: #00C851; }
.strength-4 { width: 100%; background-color: #00C851; }

.spinner-border {
    margin-right: 8px;
}

.d-none {
    display: none !important;
}
</style>

<script>
// –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º—ã
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('loginForm');
    const loginInput = document.getElementById('login');
    const passwordInput = document.getElementById('password');
    const togglePassword = document.querySelector('.toggle-password');
    const passwordStrength = document.getElementById('password-strength');
    const loginButton = document.getElementById('login-button');
    const errorMessage = document.getElementById('error-message');
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –ø—Ä–∏ –≤–≤–æ–¥–µ
    function validateForm() {
        const isFormValid = form.checkValidity();
        loginButton.disabled = !isFormValid;
        return isFormValid;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    form.addEventListener('submit', async function(event) {
        event.preventDefault();
        
        if (!validateForm()) {
            return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        loginButton.disabled = true;
        const spinner = loginButton.querySelector('.spinner-border');
        const buttonText = loginButton.querySelector('.button-text');
        
        spinner.classList.remove('d-none');
        buttonText.textContent = '–í—Ö–æ–¥...';
        errorMessage.classList.add('d-none');
        
        try {
            const formData = new FormData(form);
            // –ß–∏—Ç–∞–µ–º XSRF cookie (double-submit)
            const xsrfCookie = document.cookie
              .split('; ')
              .find(row => row.startsWith('XSRF-TOKEN='))?.split('=')[1] || '';

            const response = await fetch('login_handler.php', {
                method: 'POST',
                body: formData,
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                    'X-CSRF-Token': xsrfCookie
                }
            });
            
            const data = await response.json();
            
            if (data.success) {
                // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
                window.location.href = data.redirect || '/?page=cabinet';
            } else {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                errorMessage.textContent = data.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ';
                errorMessage.classList.remove('d-none');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ø—á—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å –≤ –æ—Ç–≤–µ—Ç–µ
                if (data.captchaHtml) {
                    const captchaContainer = document.getElementById('captcha-container');
                    if (captchaContainer) {
                        captchaContainer.innerHTML = data.captchaHtml;
                    }
                }
                
                // –ê–Ω–∏–º–∞—Ü–∏—è –æ—à–∏–±–∫–∏
                form.classList.add('shake');
                setTimeout(() => form.classList.remove('shake'), 500);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:', error);
            errorMessage.textContent = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞';
            errorMessage.classList.remove('d-none');
        } finally {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            loginButton.disabled = false;
            spinner.classList.add('d-none');
            buttonText.textContent = '–í–æ–π—Ç–∏';
        }
    });
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª–µ–π
    [loginInput, passwordInput].forEach(input => {
        input.addEventListener('input', validateForm);
    });
    
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è
    if (togglePassword) {
        togglePassword.addEventListener('click', function() {
            const type = passwordInput.type === 'password' ? 'text' : 'password';
            passwordInput.type = type;
            this.querySelector('i').textContent = type === 'password' ? 'üëÅÔ∏è' : 'üëÅÔ∏è‚Äçüó®Ô∏è';
        });
    }
    
    // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è
    if (passwordInput && passwordStrength) {
        passwordInput.addEventListener('input', function() {
            const password = this.value;
            let strength = 0;
            
            // –î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è
            if (password.length >= 8) strength++;
            
            // –°–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä—ã
            if (/\d/.test(password)) strength++;
            
            // –°–æ–¥–µ—Ä–∂–∏—Ç –±—É–∫–≤—ã –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
            if (/[a-z]/.test(password)) strength++;
            
            // –°–æ–¥–µ—Ä–∂–∏—Ç –±—É–∫–≤—ã –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
            if (/[A-Z]/.test(password)) strength++;
            
            // –°–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            if (/[^A-Za-z0-9]/.test(password)) strength++;
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å
            strength = Math.min(4, strength);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            passwordStrength.className = 'password-strength';
            passwordStrength.classList.add(`strength-${strength}`);
        });
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    validateForm();
});
</script>